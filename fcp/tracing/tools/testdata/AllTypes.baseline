============== AllTypes.fbs ============
include "${DIR}/tracing_schema_common.fbs";

table AllTypes (tag: "ALLT") {
  fieldz: byte;
  fieldy: ubyte;
  fieldx: bool;
  fieldw: short;
  fieldv: ushort;
  fieldu: int;
  fieldt: uint;
  fields: float;
  fieldr: long;
  fieldq: ulong;
  fieldp: double;
  fieldo: string;
}
============== diagnosis ============

============== result ============
// Autogenerated by tracing_traits_generator, do not edit

#ifndef THIRD_PARTY_FCP_TRACING_TOOLS_TESTDATA_ALLTYPES_H
#define THIRD_PARTY_FCP_TRACING_TOOLS_TESTDATA_ALLTYPES_H

#ifdef FLATBUFFERS_GENERATED_TRACINGSCHEMA_H_
#undef FLATBUFFERS_GENERATED_TRACINGSCHEMA_H_
#endif
#include "${DIR}/tools/testdata/AllTypes_generated.h"
#include "absl/strings/string_view.h"
#include "${DIR}/tracing_severity.h"
#include "${DIR}/tracing_traits.h"
#include "flatbuffers/minireflect.h"
#include "flatbuffers/idl.h"
#include "${BASE}/platform.h"

namespace fcp {

template<> class TracingTraits<AllTypes>: public TracingTraitsBase {
 public:
  static constexpr TracingTag kTag = TracingTag("ALLT");
  static constexpr TracingSeverity kSeverity = fcp::TracingSeverity::kInfo;
  static constexpr bool kIsSpan = false;
  const char* Name() const override { return "AllTypes"; }
  TracingSeverity Severity() const override {
    return fcp::TracingSeverity::kInfo;
  }
  std::string TextFormat(const flatbuffers::DetachedBuffer& buf) const override {
    return flatbuffers::FlatBufferToString(buf.data(), AllTypesTypeTable());
  }
  std::string JsonStringFormat(const uint8_t* flatbuf_bytes) const override {
    flatbuffers::Parser parser;
    std::string schema_file;
    std::string fbs_file = "${RUNFILE_PATH}/tools/testdata/AllTypes.fbs";
    flatbuffers::LoadFile(GetDataPath(fbs_file).c_str(), true, &schema_file);
    std::string schema_path_common = GetDataPath("${DIR}/tracing_schema_common.fbs");
    std::string directory_common = schema_path_common.substr(0, schema_path_common.find("${DIR}/tracing_schema_common.fbs"));
    const char *include_directories[] = {
                 directory_common.c_str(), nullptr};
    parser.Parse(schema_file.c_str(), include_directories);
    std::string jsongen;
    parser.SetRootType("AllTypes");
    GenText(parser, flatbuf_bytes, &jsongen);
    return jsongen;
  }
  static flatbuffers::Offset<AllTypes> Create(std::int8_t fieldz, std::uint8_t fieldy, bool fieldx, std::int16_t fieldw, std::uint16_t fieldv, std::int32_t fieldu, std::uint32_t fieldt, float fields, std::int64_t fieldr, std::uint64_t fieldq, double fieldp, absl::string_view fieldo, flatbuffers::FlatBufferBuilder* fbb) {
    auto fieldo__ = fbb->CreateString(fieldo.data(), fieldo.size());
    return CreateAllTypes(*fbb, fieldz, fieldy, fieldx, fieldw, fieldv, fieldu, fieldt, fields, fieldr, fieldq, fieldp, fieldo__);
  }
  using TupleType = std::tuple<std::int8_t, std::uint8_t, bool, std::int16_t, std::uint16_t, std::int32_t, std::uint32_t, float, std::int64_t, std::uint64_t, double, std::string>;
  static TupleType MakeTuple(const AllTypes* table) {
    return std::make_tuple(table->fieldz(), table->fieldy(), table->fieldx(), table->fieldw(), table->fieldv(), table->fieldu(), table->fieldt(), table->fields(), table->fieldr(), table->fieldq(), table->fieldp(), table->fieldo()->str());
  }
};
static internal::TracingTraitsRegistrar<AllTypes> registrar_AllTypes;
} // namespace fcp

#endif  // THIRD_PARTY_FCP_TRACING_TOOLS_TESTDATA_ALLTYPES_H

