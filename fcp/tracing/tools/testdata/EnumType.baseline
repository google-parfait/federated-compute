============== EnumType.fbs ============
include "${DIR}/tracing_schema_common.fbs";

enum Color : byte { Red = 0, Green = 1, Blue = 2 }

table Monster(tag: "MONS") {
  hp: int32;
  color : Color;
}

============== diagnosis ============

============== result ============
// Autogenerated by tracing_traits_generator, do not edit

#ifndef THIRD_PARTY_FCP_TRACING_TOOLS_TESTDATA_ENUMTYPE_H
#define THIRD_PARTY_FCP_TRACING_TOOLS_TESTDATA_ENUMTYPE_H

#ifdef FLATBUFFERS_GENERATED_TRACINGSCHEMA_H_
#undef FLATBUFFERS_GENERATED_TRACINGSCHEMA_H_
#endif
#include "${DIR}/tools/testdata/EnumType_generated.h"
#include "absl/strings/string_view.h"
#include "${DIR}/tracing_severity.h"
#include "${DIR}/tracing_traits.h"
#include "flatbuffers/minireflect.h"
#include "flatbuffers/idl.h"
#include "${BASE}/platform.h"

namespace fcp {

template<> class TracingTraits<Monster>: public TracingTraitsBase {
 public:
  static constexpr TracingTag kTag = TracingTag("MONS");
  static constexpr TracingSeverity kSeverity = fcp::TracingSeverity::kInfo;
  static constexpr bool kIsSpan = false;
  const char* Name() const override { return "Monster"; }
  TracingSeverity Severity() const override {
    return fcp::TracingSeverity::kInfo;
  }
  std::string TextFormat(const flatbuffers::DetachedBuffer& buf) const override {
    return flatbuffers::FlatBufferToString(buf.data(), MonsterTypeTable());
  }
  std::string JsonStringFormat(const uint8_t* flatbuf_bytes) const override {
    flatbuffers::Parser parser;
    std::string schema_file;
    std::string fbs_file = "${RUNFILE_PATH}/tools/testdata/EnumType.fbs";
    flatbuffers::LoadFile(GetDataPath(fbs_file).c_str(), true, &schema_file);
    std::string schema_path_common = GetDataPath("${DIR}/tracing_schema_common.fbs");
    std::string directory_common = schema_path_common.substr(0, schema_path_common.find("${DIR}/tracing_schema_common.fbs"));
    const char *include_directories[] = {
                 directory_common.c_str(), nullptr};
    parser.Parse(schema_file.c_str(), include_directories);
    std::string jsongen;
    parser.SetRootType("Monster");
    GenText(parser, flatbuf_bytes, &jsongen);
    return jsongen;
  }
  static flatbuffers::Offset<Monster> Create(std::int32_t hp, Color color, flatbuffers::FlatBufferBuilder* fbb) {
    return CreateMonster(*fbb, hp, color);
  }
  using TupleType = std::tuple<std::int32_t, Color>;
  static TupleType MakeTuple(const Monster* table) {
    return std::make_tuple(table->hp(), table->color());
  }
};
static internal::TracingTraitsRegistrar<Monster> registrar_Monster;
} // namespace fcp

#endif  // THIRD_PARTY_FCP_TRACING_TOOLS_TESTDATA_ENUMTYPE_H

