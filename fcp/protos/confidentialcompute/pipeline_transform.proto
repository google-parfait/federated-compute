// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package fcp.confidentialcompute;

// A data record used as one of the inputs or outputs of a transform.
// TODO: b/422236990 - Remove in favor of BlobMetadata.
message Record {
  option deprecated = true;

  oneof kind {
    bytes unencrypted_data = 1
        ;
    HpkePlusAeadData hpke_plus_aead_data = 2;
  }

  // Describes the type of data-unaware compression that has been applied prior
  // to any encryption.
  enum CompressionType {
    COMPRESSION_TYPE_UNSPECIFIED = 0;
    // No compression was applied.
    COMPRESSION_TYPE_NONE = 1;
    // GZIP compression was applied.
    COMPRESSION_TYPE_GZIP = 2;
  }

  CompressionType compression_type = 3;

  // Optional. Unique identifier for the record.
  bytes record_id = 5;

  // Information about plaintext encrypted with AEAD, with the symmetric key
  // then encrypted with HPKE.
  message HpkePlusAeadData {
    // The data, encrypted using AES-128-GCM.
    bytes ciphertext = 1;

    // The associated data for `ciphertext`.
    bytes ciphertext_associated_data = 2;

    // The symmetric key used to encrypt `ciphertext`, encrypted using HPKE.
    // The key is encoded as a COSE_Key struct (RFC 9052); at least the
    // following algorithms should be supported:
    //   -65538: AEAD_AES_128_GCM_SIV (fixed nonce)
    bytes encrypted_symmetric_key = 3;

    // The associated data for `encrypted_symmetric_key`.
    oneof symmetric_key_associated_data_components {
      LedgerAssociatedData ledger_symmetric_key_associated_data = 6;
      RewrappedAssociatedData rewrapped_symmetric_key_associated_data = 7;
    }

    // The ephemeral Diffe-Hellman key needed to derive the symmetric key used
    // to encrypt `encrypted_secret_key`.
    bytes encapsulated_public_key = 5;

    // Components which will be appended together to create the associated data
    // to be used for decryption of the symmetric key by the Ledger so that it
    // can check the policy and grant access to worker components.
    message LedgerAssociatedData {
      // A serialized `fcp.confidentialcompute.BlobHeader`.
      bytes record_header = 1;
    }

    // Components which will be appended together to create the associated data
    // to be used for decryption of the symmetric key by a sealed worker
    // application after the Ledger has checked the policy and rewrapped the
    // symmetric key for access by the worker.
    message RewrappedAssociatedData {
      // If the application will be re-encrypting its output, the CWT for the
      // public key to use. The CWT has the same required claims and parameters
      // as `fcp.confidentialcompute.CreateKeyResponse.public_key`. Reusing the
      // same public key as the input ensures that derived objects have the same
      // expiration time as the original data. This key can be ignored if the
      // application doesn't encrypt its outputs (e.g., because it produces
      // anonymized aggregate results).
      bytes reencryption_public_key = 1;

      // Unique nonce for this record to protect against replay attacks by an
      // unsealed portion of the stack. The sealed worker application will
      // ensure that it has not already used the nonce before decrypting and
      // processing the data.
      bytes nonce = 2;
    }

    reserved 4;
  }
}
